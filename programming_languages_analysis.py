# -*- coding: utf-8 -*-
"""Programming Languages Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v8o1tkfanrd6fMK1L_cHKaKTu5NEPcVV

# Importing Libraries
"""

!pip install bar_chart_race 
!pip install ffmpeg # Used for compiling video in Python code

# Commented out IPython magic to ensure Python compatibility.
#data
import pandas as pd
import numpy as np
import re
#Visulizing
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import plotly.express as px
import plotly.io as pio
from scipy.integrate import simps
from numpy import trapz
from numpy import mean
# %matplotlib inline
import matplotlib as mpl
from matplotlib import cm
from matplotlib import animation
from matplotlib.animation import FuncAnimation
from IPython.display import HTML, display
from datetime import datetime
from palettable.matplotlib import Magma_20_r, Magma_10_r
import re
import random
from copy import copy
import requests
from bs4 import BeautifulSoup
from PIL import Image
from matplotlib.pyplot import figure
import matplotlib.image as image
from matplotlib.cbook import get_sample_data
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import plotly.graph_objects as go
import bar_chart_race as bcr

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

"""#Importing Data"""

Data = pd.read_csv('data.csv')

Data.head() # first five elements

Data.info()

"""# Data Preprosessing"""

Data.shape

"""Checking for null values"""

Data.isnull().sum()

j=0
for i in Data['LanguagesWorkedWith'].tolist():
    lst=i.split(';')
    Data['LanguagesWorkedWith'][j]=lst
    j+=1

"""Languages and their occurence"""

from collections import Counter
c=Counter()
for i in Data['LanguagesWorkedWith'].tolist():
    c.update(i)
    
print(len(c))
c

"""Top ten famous languages"""

famous = c.most_common(10)
famous

"""Number of languages"""

number_languages = len(c)
print('Number of languages =', number_languages)

"""#Adding another Dataset"""

Lang_pd = pd.read_csv('Most Popular Programming Languages from 2004 to 2020.csv')

Lang_pd.head()

"""#Preprocessing new dataset"""

Lang_pd.isnull().sum()

#Convering the date to Datetime data type
Lang_pd['Date'] = pd.to_datetime(Lang_pd['Date'])

# #Setting date as index
# Lang_pd.set_index('Date', inplace = True)
Lang_pd.head()

Lang_pd.info()

n = len(Lang_pd.columns)
print("number of languages =" , n)

"""Checking for Null Values"""

import missingno as miss

miss.matrix(Lang_pd)

"""We can see that there are no missing values in the data."""

Lang_pd.describe()

"""Number of Languages in dataset"""

print(Lang_pd.dtypes)

"""#Visualizing

Set of color and grid style
"""

PALETTE = "magma_r" # my favourite palettes: flare, CMRmap_r, magma_r
sns.set(style="darkgrid")

# function that generates n color values out of defined PALETTE
def generate_color_series(n):
    segments = cm.get_cmap(PALETTE, n)
    return segments(range(n))

"""Top 10 mean popular languages"""

data_mean_list = []

for col in Lang_pd:
    if col == "Date":
        pass
    else:
        data_mean_list.append([col, Lang_pd[col].mean()])

data_mean = pd.DataFrame(data_mean_list, columns = ["language", "mean"])
data_mean = data_mean.sort_values(by=["mean"], ascending=False)

plt.figure(figsize=(16, 6))
plt.subplot(1, 2, 1)
plt.title("Mean popularity of languages")
sns.barplot(data=data_mean, x="mean", y="language", palette=generate_color_series(28))
plt.xlabel("Mean popularity in %")
plt.ylabel("Programming language")
plt.subplot(1, 2, 2)
data_mean_top10 = data_mean.nlargest(10, "mean")
plt.title("Top 10 mean popular languages")
donut_top10 = plt.Circle( (0,0), 0.7, color='white')
plt.pie(data_mean_top10["mean"],labels=data_mean_top10["language"], wedgeprops = {"linewidth": 5, "edgecolor": "white"}, colors=generate_color_series(10))
p = plt.gcf()
p.gca().add_artist(donut_top10)

plt.show()

"""Popularity of all languages"""

top10_linechart_color = generate_color_series(10)
plt.figure(figsize=(14, 8))
for index, element in enumerate(data_mean["language"]):
    plt.plot(Lang_pd["Date"], Lang_pd[element], color=top10_linechart_color[index], label=element)
    
    plt.legend()
    if index == 9:
        break
plt.title("Popularity of languages")
plt.xlabel("Year")
plt.ylabel("Mean popularity in %")

plt.legend(bbox_to_anchor=(1.04,1), loc="upper left")

# #Convering the date to Datetime data type
# Lang_pd['Date'] = pd.to_datetime(Lang_pd['Date'])

# #Setting date as index
Lang_pd.set_index('Date', inplace = True)

"""Figuring out top 10 languages using Mean"""

mask = Lang_pd.mean() > 2.5

Lang_pd = Lang_pd.loc[:, mask]

clms = Lang_pd.columns.tolist()
clms

"""Popularity of Python"""

Lang_pd['Python'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: Python",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['Python'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""Popularity of C/C++"""

Lang_pd['C/C++'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: C/C++",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['C/C++'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""Popularity of C#"""

Lang_pd['C#'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: C#",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['C#'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""Popularity of Java"""

Lang_pd['Java'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: Java",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['Java'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""Popularity of PHP"""

Lang_pd['PHP'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: PHP",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['PHP'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""Popularity of Javascript """

Lang_pd['Javascript'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: Javascript",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['Javascript'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""Popularity of Visual Basic"""

Lang_pd['Visual Basic'].plot(kind="line",figsize=(15,10),color='skyblue',linewidth=10)
title = plt.title("Popularity over time: Visual Basic",fontsize=22)
title.set_position([.5, 1.009])
plt.xlabel("Time",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.fill_between(x=Lang_pd.index.values,y1=Lang_pd['Visual Basic'].values,color='lightseagreen')
axes = plt.gca()
axes.set_ylim([0,35])
plt.show()

"""We'll try 3 overall popularity measures: Mean, Area under curve (Simpson's Rule), and Area under curve (Trapezoidal).
Mean total of each column / # of records
Simpson's Rule: approximation of integral, based on known area under a parabola
Trapezoidal Rule: approximation of integral, based on subdividing into multiple trapezoids with known areas
"""

programming_languages = []
popularity_mean = []
popularity_simps = []
popularity_trapz = []

for i in Lang_pd.columns:
    programming_languages.append(i)
    popularity_mean.append(mean(Lang_pd[i].values))
    popularity_simps.append(simps(Lang_pd[i].values))
    popularity_trapz.append(trapz(Lang_pd[i].values))

popularity_list = list(zip(popularity_mean,popularity_simps,popularity_trapz))
popularity_df = pd.DataFrame(popularity_list, columns=['Mean','Simpsons','Trapezoidal'],index=programming_languages)
popularity_df.head(2)

"""Moving average with a window of 10"""

Lang_pd_mov = pd.DataFrame()
for i in Lang_pd.columns:
    Lang_pd_mov[i] = Lang_pd[i].rolling(window=10).mean()
#remove first 9 rows which are NaN now
Lang_pd_mov = Lang_pd_mov.iloc[9:]

top_ten_mean = popularity_df.nlargest(10,'Mean')['Mean']
top_ten_simps = popularity_df.nlargest(10,'Simpsons')['Simpsons']
top_ten_trapz = popularity_df.nlargest(10,'Trapezoidal')['Trapezoidal']
results_list = [top_ten_mean,top_ten_simps,top_ten_trapz]

def wordclouds_tiled(n, df_list):
    plt.figure(figsize=(12,12))
    j = np.ceil(n/3)
    subtitles = ["Mean","Simpson's Rule","Trapezoidal"]
    for t in range(n):
        i=t+1
        title = plt.subplot(j, 3, i).set_title("Top ten: " + subtitles[t])
        plt.plot()
        title.set_position([.5, 1.1])
        plt.imshow(WordCloud(background_color="white",width=200,height=200,prefer_horizontal=1,colormap='Dark2').generate_from_frequencies(frequencies=df_list[t]))
        plt.axis("off")
    plt.show()

wordclouds_tiled(3,results_list)

"""Top 10 programming languages 2004"""

top_ten_simps.sort_values(ascending=True).plot(kind="bar",figsize=(12,5),color='lightseagreen',linewidth=10)
title = plt.title("Top ten programming languages (since 2004)",fontsize=22)
title.set_position([.5, 1.009])
plt.xticks(size=12,rotation=0, horizontalalignment="center")
plt.xlabel("Programming Language",fontsize=15,labelpad=20)
plt.ylabel("Popularity",fontsize=15, labelpad=20)
plt.show()

"""Programming Languages Score (May 2021)"""

Lang_pd.tail(1).T.values.flatten()

df_popular = pd.DataFrame({'Languages':Lang_pd.tail(1).T.index, 'Popularity':Lang_pd.tail(1).T.values.flatten()})

df_popular

fig = px.pie(df_popular, values='Popularity', names='Languages',
             title='Programming Languages Score (May 2021)')
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()

"""Languages with popularity for Data one"""

x=[i[0] for i in famous]
y=[i[1] for i in famous]

plt.bar(x,y,color='#008fd5')
plt.title("Languages with popularity")
plt.xticks(rotation='vertical')
plt.xlabel("Languages")
plt.ylabel("Voting")
plt.title("Languages with voting")
plt.show()

"""Top 10 Programming Languages (2004 - 2021)"""

bcr.bar_chart_race(df=Lang_pd, n_bars=10, figsize=(6, 6), filter_column_colors=True, title='Top 10 Programming Languages (2004 - 2021)', filename=None)